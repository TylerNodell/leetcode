// Not a great solution, but it works

var findMedianSortedArrays = function(nums1, nums2) {
    var m = nums1.length;
    var n = nums2.length;
    if (m > n) {
        return findMedianSortedArrays(nums2, nums1);
    }
    var iMin = 0, iMax = m;
    while (iMin <= iMax) {
        var i = Math.floor((iMin + iMax) / 2);
        var j = Math.floor((m + n + 1) / 2) - i;
        if (i < iMax && nums2[j - 1] > nums1[i]) {
            iMin = i + 1;
        } else if (i > iMin && nums1[i - 1] > nums2[j]) {
            iMax = i - 1;
        } else {
            var maxLeft = 0;
            if (i == 0) {
                maxLeft = nums2[j - 1];
            } else if (j == 0) {
                maxLeft = nums1[i - 1];
            } else {
                maxLeft = Math.max(nums1[i - 1], nums2[j - 1]);
            }
            if ((m + n) % 2 == 1) {
                return maxLeft;
            }
            var minRight = 0;
            if (i == m) {
                minRight = nums2[j];
            } else if (j == n) {
                minRight = nums1[i];
            } else {
                minRight = Math.min(nums1[i], nums2[j]);
            }
            return (maxLeft + minRight) / 2;
        }
    }
};

// Doesnt work, I tried

var findKth = function(nums1, start1, nums2, start2, k) {
    if (start1 >= nums1.length) {
        return nums2[start2 + k - 1];
    }
    if (start2 >= nums2.length) {
        return nums1[start1 + k - 1];
    }
    if (k == 1) {
        return Math.min(nums1[start1], nums2[start2]);
    }
    var mid1 = Math.min(k / 2, nums1.length - start1);
    var mid2 = Math.min(k / 2, nums2.length - start2);
    if (nums1[start1 + mid1 - 1] < nums2[start2 + mid2 - 1]) {
        return findKth(nums1, start1 + mid1, nums2, start2, k - mid1);
    } else {
        return findKth(nums1, start1, nums2, start2 + mid2, k - mid2);
    }
};

var findMedianSortedArrays2 = function(nums1, nums2) {
    var m = nums1.length;
    var n = nums2.length;
    var total = m + n;
    if (total % 2 == 1) {
        return findKth(nums1, 0, nums2, 0, Math.floor(total / 2) + 1);
    } else {
        return (findKth(nums1, 0, nums2, 0, total / 2) + findKth(nums1, 0, nums2, 0, total / 2 + 1)) / 2;
    }
}